// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"main_signature","type":"string"},{"name":"length_signature","type":"string"},{"name":"destination","type":"address"}],"name":"registerLengthFunction","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_fallback","type":"address"}],"name":"setFallback","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"fallback","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"sig","type":"bytes4"}],"name":"lookup","outputs":[{"name":"destination","type":"address"},{"name":"outsize","type":"uint256"},{"name":"length_destination","type":"address"},{"name":"length_sig","type":"bytes4"}],"type":"function"},{"constant":false,"inputs":[{"name":"signature","type":"string"}],"name":"stringToSig","outputs":[{"name":"","type":"bytes4"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes4"}],"name":"pointers","outputs":[{"name":"destination","type":"address"},{"name":"outsize","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"signature","type":"string"},{"name":"destination","type":"address"},{"name":"outsize","type":"uint256"}],"name":"register","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes4"}],"name":"length_pointers","outputs":[{"name":"sig","type":"bytes4"},{"name":"destination","type":"address"}],"type":"function"},{"inputs":[{"name":"_fallback","type":"address"}],"type":"constructor"}],
    binary: "60606040526040516020806104d683395060806040525160018054600160a060020a031916821790555061049f806100376000396000f36060604052361561006c5760e060020a600035046318b31f94811461006e57806332b12eac1461010d578063552079dc146101335780636f68e8d2146101455780637c34752f14610187578063b5d7ccc314610217578063d393c87114610240578063ec00e842146102b0575b005b61006c6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965050933593505050506040604051908101604052806103d4846101d2565b6001805473ffffffffffffffffffffffffffffffffffffffff191660043517905561006c565b6102e2600154600160a060020a031681565b6102ff600435600081815260208190526040812054819081908190600160a060020a031681141561044857600154600160a060020a0316935060209250610470565b61033c6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050505b600081604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060e060020a809104029050919050565b60006020819052600435815260409020805460019091015461034e91600160a060020a03169082565b61006c6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505093359350506044359150506040805180820190915282815260208101829052600080610396866101d2565b61037460043560026020526000908152604090205460e060020a810290600160a060020a036401000000009091041682565b60408051600160a060020a03929092168252519081900360200190f35b6040518085600160a060020a0316815260200184815260200183600160a060020a0316815260200182815260200194505050505060405180910390f35b60408051918252519081900360200190f35b6040518083600160a060020a031681526020018281526020019250505060405180910390f35b60408051928352600160a060020a039190911660208301528051918290030190f35b81526020818101929092526040016000208251815473ffffffffffffffffffffffffffffffffffffffff191617815591015160019190910155505050565b8152602001829052600260006103e9866101d2565b81526020818101929092526040016000208251815493909201516401000000000277ffffffffffffffffffffffffffffffffffffffff000000001960e060020a90930463ffffffff199094169390931791909116919091179055505050565b6000858152602081905260409020805460019190910154600160a060020a0391909116945092505b50506000928352600260205260409092205490926401000000008204600160a060020a03169160e060020a029056",
    unlinked_binary: "60606040526040516020806104d683395060806040525160018054600160a060020a031916821790555061049f806100376000396000f36060604052361561006c5760e060020a600035046318b31f94811461006e57806332b12eac1461010d578063552079dc146101335780636f68e8d2146101455780637c34752f14610187578063b5d7ccc314610217578063d393c87114610240578063ec00e842146102b0575b005b61006c6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965050933593505050506040604051908101604052806103d4846101d2565b6001805473ffffffffffffffffffffffffffffffffffffffff191660043517905561006c565b6102e2600154600160a060020a031681565b6102ff600435600081815260208190526040812054819081908190600160a060020a031681141561044857600154600160a060020a0316935060209250610470565b61033c6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050505b600081604051808280519060200190808383829060006004602084601f0104600f02600301f150905001915050604051809103902060e060020a809104029050919050565b60006020819052600435815260409020805460019091015461034e91600160a060020a03169082565b61006c6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505093359350506044359150506040805180820190915282815260208101829052600080610396866101d2565b61037460043560026020526000908152604090205460e060020a810290600160a060020a036401000000009091041682565b60408051600160a060020a03929092168252519081900360200190f35b6040518085600160a060020a0316815260200184815260200183600160a060020a0316815260200182815260200194505050505060405180910390f35b60408051918252519081900360200190f35b6040518083600160a060020a031681526020018281526020019250505060405180910390f35b60408051928352600160a060020a039190911660208301528051918290030190f35b81526020818101929092526040016000208251815473ffffffffffffffffffffffffffffffffffffffff191617815591015160019190910155505050565b8152602001829052600260006103e9866101d2565b81526020818101929092526040016000208251815493909201516401000000000277ffffffffffffffffffffffffffffffffffffffff000000001960e060020a90930463ffffffff199094169390931791909116919091179055505050565b6000858152602081905260409020805460019190910154600160a060020a0391909116945092505b50506000928352600260205260409092205490926401000000008204600160a060020a03169160e060020a029056",
    address: "0x66fd8d5c67da546ce053b3bfd542dd6f37c17432",
    generated_with: "2.0.6",
    contract_name: "Resolver"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Resolver error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Resolver error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Resolver error: lease call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Resolver error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Resolver = Contract;
  }

})();
