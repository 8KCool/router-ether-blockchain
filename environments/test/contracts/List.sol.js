// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"key","type":"uint256"}],"name":"getLength","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"key","type":"uint256"}],"name":"getReturnSize","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"key","type":"uint256"}],"name":"getAll","outputs":[{"name":"","type":"uint256[]"}],"type":"function"},{"constant":false,"inputs":[{"name":"key","type":"uint256"},{"name":"_data","type":"uint256[]"}],"name":"setList","outputs":[],"type":"function"}],
    binary: "606060405261020b806100126000396000f3606060405236156100405760e060020a60003504630986e647811461005557806325ab2d03146100705780633c077a481461008e578063b8c5812814610102575b602b5b60408051918252519081900360200190f35b6100436004356000818152600260205260409020545b919050565b6100436004356000818152600260208190526040909120540161006b565b6101996004356040805160208181018352600080835284815260028252839020805484518184028101840190955280855292939290918301828280156100f657602002820191906000526020600020905b8160005054815260200190600101908083116100df575b5050505050905061006b565b6040805160248035600481810135602081810286810182019097528186526101e396833596939560449501929182919085019084908082843750949650505050505050600082815260026020908152604082208054845180835582855293839020919390820192909190850182156101e5579160200282015b828111156101e557825182600050559160200191906001019061017b565b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019250505060405180910390f35b005b506102019291505b8082111561020757600081556001016101ed565b50505050565b509056",
    unlinked_binary: "606060405261020b806100126000396000f3606060405236156100405760e060020a60003504630986e647811461005557806325ab2d03146100705780633c077a481461008e578063b8c5812814610102575b602b5b60408051918252519081900360200190f35b6100436004356000818152600260205260409020545b919050565b6100436004356000818152600260208190526040909120540161006b565b6101996004356040805160208181018352600080835284815260028252839020805484518184028101840190955280855292939290918301828280156100f657602002820191906000526020600020905b8160005054815260200190600101908083116100df575b5050505050905061006b565b6040805160248035600481810135602081810286810182019097528186526101e396833596939560449501929182919085019084908082843750949650505050505050600082815260026020908152604082208054845180835582855293839020919390820192909190850182156101e5579160200282015b828111156101e557825182600050559160200191906001019061017b565b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019250505060405180910390f35b005b506102019291505b8082111561020757600081556001016101ed565b50505050565b509056",
    address: "0xe0515a522c2cff6de119294ef321b76f7b1f1ae0",
    generated_with: "2.0.9",
    contract_name: "List"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("List error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("List error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("List error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("List error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.List = Contract;
  }

})();
